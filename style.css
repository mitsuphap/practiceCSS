.bg {
    width: 500px;
    height: 1000px;
    background-image: url(images/pandacute.jpeg);
    background-color: cadetblue;
    background-repeat: no-repeat;
    background-size: cover;
    background-position: 50% 50%;
    /* Short Hand */
    /* background: url(images/pandacute.jpeg) no-repeat; */
}

body {
    font-family: 'Prompt', sans-serif;
}

@font-face {
    font-family: PromptReg;
    src: url(fonts/Prompt-Regular.woff);
}

/* Border */
/* 
        dotted - Defines a dotted border
        dashed - Defines a dashed border
        solid - Defines a solid border
        double - Defines a double border
        groove - Defines a 3D grooved border. The effect depends on the border-color value
        ridge - Defines a 3D ridged border. The effect depends on the border-color value
        inset - Defines a 3D inset border. The effect depends on the border-color value
        outset - Defines a 3D outset border. The effect depends on the border-color value
        none - Defines no border
        hidden - Defines a hidden border

        border-width
        border-style
        border-color
*/

.border {
    width: 300px;
    height: 300px;
    border-width: 2px;
    border-style: dashed;
    border-color: pink;
}

/* Box model & margin & padding */

.box {
    width: 100px;
    height: 100px;
    background-color: black;
    border: 10px solid green;
    color: blanchedalmond;
    margin: 10px;
    padding: 50px;
}

/* display */

.dis {
    background-color: coral;
    display: inline;
}

.visibility {
    visibility: hidden;
}

.hidden {
    display: none;
}

.dis2 {
    background-color: darkolivegreen;
    display: block;
}

/* width and Max width */

.ex1 {
   width: 1000px;
   border: 2px solid green; 
}

.ex2 {
    max-width: 1000px;
    border: 2px solid rebeccapurple;
}

/* Position */
/* 
- static	
- absolute		
- fixed		
- relative
- sticky
 */

.position {
    width: 300px;
    height: 20px;
    border: 2px solid goldenrod;
    position: static;
}

.parent {
    width: 300px;
    height: 150px;
    border: 2px solid blue;
    position: relative;
    top: 50;
    left: 50;
}

.child {
    width: 100px;
    height: 50px;
    border: 2px solid red;
    position: absolute;
    right: 0;
    bottom: 0;
}

/* z index */
.box1 {
    width: 100px;
    height: 100px;
    background-color: rosybrown;
    border: 2px solid black;
    position: relative;
    top: 50px;
    z-index: -1;
}

.box2 {
    width: 100px;
    height: 100px;
    background-color: royalblue;
    border: 2px solid black;
    z-index: 1;
}

.box3 {
    width: 100px;
    height: 100px;
    background-color: plum;
    border: 2px solid black;
    position: relative;
    top: -40px;
    z-index: 2;
}

/* overflow */
.flow {
    width: 300px;
    height: 150px;
    border: 2px solid black;
    overflow: scroll;
}

/* CSS -Combinators
    descendant selector (space)
    child selector (>)
    adjacent sibling selector (+)
    general sibling selector (~)
*/

/* descendant selector (space) */
/* div p {
    background-color: burlywood;
} */

/* child selector (>) */
/* div > p {
    background-color: burlywood;
} */

/* adjacent sibling selector (+) [find only one p after div]*/
/* div + p {
    background-color: burlywood;
} */

/* general sibling selector (~) [find every p after div] */
/* div ~ p {
    background-color: burlywood;
} */

/* 

    : Pseudo class 
    :: Pseudo elements 

*/

.pseudoclass {
    width: 100px;
    height: 100px;
    background-color: chocolate;
}

.pseudoclass:hover {
    background-color: cornflowerblue;
}

.pseudoelement::first-line {
    font-size: 36px;
}

/* combine */
.a:first-child::first-line {
    font-size: 40px;
}

/* before and after */

.b::before {
    content: "This is inserted from before =>";
}

.b::after {
    content: "<= This is inserted from after";
}

/* box-sizing [if don't use box-sizing the size that you assign will be change] */

.somebox {
    width: 150px;
    height: 150px;
    border: 2px solid black;
    padding: 20px;
    box-sizing: border-box;
}

/* * use for reset size browser */
/* * {
    margin: 0;
} */

/* 
    CSS Specificity [Define Level in  CSS]

    - Inline styles <header style="color: #000;"></header>
    - IDs - #content.
    - Classes, attributes and pseudo-classes - such as :hover, :focus etc.
    - Elements and pseudo-elements - such as h1, div, ::before and ::after.

*/

#heading {
    color: red;
}

.heading {
    color: green;
}
h2 {
    color: purple;
}